import { EventEmitter, } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
export class ItemTemplateComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        // Event Emitters
        this.onUpdateEmitter = new EventEmitter();
        this.onGetLookupsEmitter = new EventEmitter();
        this.onShowModalEmitter = new EventEmitter();
        this.onDeleteEmitter = new EventEmitter();
        this._formGroup = new FormGroup({});
        this._formGroupKeys = [];
        this.registerChangeFunction = (changeFn) => {
            this._changeFn = changeFn;
        };
        this.onUpdate = (propertyName, actionData) => {
            const actionEventEmitterData = {
                propertyName: propertyName,
                id: this.data.get(this.idPropertyName),
                data: actionData,
            };
            this.onUpdateEmitter.emit(actionEventEmitterData);
        };
        this.onGetLookups = (lookupName, callback) => {
            const actionEventEmitterData = {
                lookupName: lookupName,
                callback: callback
            };
            this.onGetLookupsEmitter.emit(actionEventEmitterData);
        };
        this.onShowModal = (modalName, data) => {
            const actionEventEmitterData = {
                modalName: modalName,
                id: this.data.get(this.idPropertyName),
                data: data,
            };
            this.onShowModalEmitter.emit(actionEventEmitterData);
        };
        this.onDelete = (actionData) => {
            const actionEventEmitterData = {
                id: this.data.get(this.idPropertyName),
                data: actionData,
            };
            this.onDeleteEmitter.emit(actionEventEmitterData);
        };
        // registerFormControl(propertyName: string)
        this.registerFormGroup = (formGroup) => {
            this._formGroup = formGroup;
        };
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (this._changeFn) {
            this._changeFn(changes);
        }
        const dataChanges = changes.data ? changes.data.currentValue : null;
        if (dataChanges && !changes.data.isFirstChange()) {
            const dataObj = dataChanges.toJS();
            this._formGroupKeys.forEach((key) => {
                const newValue = dataObj.data[key];
                const oldValue = this._formGroup.get(key).value;
                if (newValue !== oldValue) {
                    this._formGroup.get(key).setValue(newValue, { emit: false, onlySelf: true });
                }
            });
        }
        if (this.changeDetectorRef) {
            this.changeDetectorRef.detectChanges();
        }
    }
    createFormControl(propertyName, initialValue, validators) {
        const formControl = new FormControl(initialValue, validators);
        this._formGroup.addControl(propertyName, formControl);
        this._formGroupKeys.push(propertyName);
        return formControl;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS10ZW1wbGF0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1ldmVudHN0b3JlLWxpc3RpbmcvIiwic291cmNlcyI6WyJjb21wb25lbnRzL3RlbXBsYXRlLWNvbXBvbmVudHMvaXRlbS10ZW1wbGF0ZS9pdGVtLXRlbXBsYXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsWUFBWSxHQUtiLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFDTCxTQUFTLEVBQWMsV0FBVyxFQUNuQyxNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE1BQU0sT0FBZ0IscUJBQXFCO0lBZXpDLFlBQXNCLGlCQUFxQztRQUFyQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW9CO1FBZDNELGlCQUFpQjtRQUNqQixvQkFBZSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hELHdCQUFtQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzVELHVCQUFrQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzNELG9CQUFlLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFLaEQsZUFBVSxHQUFjLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLG1CQUFjLEdBQWEsRUFBRSxDQUFDO1FBa0N0QywyQkFBc0IsR0FBRyxDQUFDLFFBQTJCLEVBQUUsRUFBRTtZQUN2RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUM1QixDQUFDLENBQUE7UUFFRCxhQUFRLEdBQUcsQ0FBQyxZQUFvQixFQUFFLFVBQWUsRUFBRSxFQUFFO1lBQ25ELE1BQU0sc0JBQXNCLEdBQUc7Z0JBQzdCLFlBQVksRUFBRSxZQUFZO2dCQUMxQixFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztnQkFDdEMsSUFBSSxFQUFFLFVBQVU7YUFDakIsQ0FBQztZQUNGLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFBO1FBRUQsaUJBQVksR0FBRyxDQUFDLFVBQWtCLEVBQUUsUUFBZ0MsRUFBRSxFQUFFO1lBQ3RFLE1BQU0sc0JBQXNCLEdBQUc7Z0JBQzdCLFVBQVUsRUFBRSxVQUFVO2dCQUN0QixRQUFRLEVBQUUsUUFBUTthQUNuQixDQUFDO1lBQ0YsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQTtRQUVELGdCQUFXLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDaEMsTUFBTSxzQkFBc0IsR0FBRztnQkFDN0IsU0FBUyxFQUFFLFNBQVM7Z0JBQ3BCLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO2dCQUN0QyxJQUFJLEVBQUUsSUFBSTthQUNYLENBQUM7WUFDRixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFBO1FBRUQsYUFBUSxHQUFHLENBQUMsVUFBZ0IsRUFBRSxFQUFFO1lBQzlCLE1BQU0sc0JBQXNCLEdBQUc7Z0JBQzdCLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO2dCQUN0QyxJQUFJLEVBQUUsVUFBVTthQUNqQixDQUFDO1lBQ0YsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUE7UUFFRCw0Q0FBNEM7UUFDNUMsc0JBQWlCLEdBQUcsQ0FBQyxTQUFvQixFQUFRLEVBQUU7WUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDOUIsQ0FBQyxDQUFBO0lBdkU2RCxDQUFDO0lBRS9ELFFBQVEsS0FBVSxDQUFDO0lBRW5CLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN6QjtRQUVELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDcEUsSUFBSSxXQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFO1lBQ2hELE1BQU0sT0FBTyxHQUFJLFdBQW1CLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFNUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDbEMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUVoRCxJQUFJLFFBQVEsS0FBSyxRQUFRLEVBQUU7b0JBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2lCQUM5RTtZQUNILENBQUMsQ0FBQyxDQUFDO1NBRUo7UUFHRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBNkNELGlCQUFpQixDQUFDLFlBQW9CLEVBQUUsWUFBaUIsRUFBRSxVQUFzQjtRQUMvRSxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEV2ZW50RW1pdHRlcixcbiAgT25Jbml0LFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIENoYW5nZURldGVjdG9yUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtcbiAgRm9ybUdyb3VwLCBWYWxpZGF0b3JzLCBGb3JtQ29udHJvbFxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJdGVtVGVtcGxhdGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIC8vIEV2ZW50IEVtaXR0ZXJzXG4gIG9uVXBkYXRlRW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIG9uR2V0TG9va3Vwc0VtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBvblNob3dNb2RhbEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBvbkRlbGV0ZUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGlkUHJvcGVydHlOYW1lOiBzdHJpbmc7XG4gIGRhdGE6IGFueTsgLy8gSW1tdXRhYmxlIGl0ZW1cbiAgbG9va3VwczogYW55O1xuICBwcml2YXRlIF9mb3JtR3JvdXA6IEZvcm1Hcm91cCA9IG5ldyBGb3JtR3JvdXAoe30pO1xuICBwcml2YXRlIF9mb3JtR3JvdXBLZXlzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIF9jaGFuZ2VGbjogKGNoYW5nZXMpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGNoYW5nZURldGVjdG9yUmVmPzogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fY2hhbmdlRm4pIHtcbiAgICAgIHRoaXMuX2NoYW5nZUZuKGNoYW5nZXMpO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGFDaGFuZ2VzID0gY2hhbmdlcy5kYXRhID8gY2hhbmdlcy5kYXRhLmN1cnJlbnRWYWx1ZSA6IG51bGw7XG4gICAgaWYgKGRhdGFDaGFuZ2VzICYmICFjaGFuZ2VzLmRhdGEuaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICBjb25zdCBkYXRhT2JqID0gKGRhdGFDaGFuZ2VzIGFzIGFueSkudG9KUygpO1xuXG4gICAgICB0aGlzLl9mb3JtR3JvdXBLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGRhdGFPYmouZGF0YVtrZXldO1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX2Zvcm1Hcm91cC5nZXQoa2V5KS52YWx1ZTtcblxuICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5fZm9ybUdyb3VwLmdldChrZXkpLnNldFZhbHVlKG5ld1ZhbHVlLCB7IGVtaXQ6IGZhbHNlLCBvbmx5U2VsZjogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICB9XG5cblxuICAgIGlmICh0aGlzLmNoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICByZWdpc3RlckNoYW5nZUZ1bmN0aW9uID0gKGNoYW5nZUZuOiAoY2hhbmdlcykgPT4gdm9pZCkgPT4ge1xuICAgIHRoaXMuX2NoYW5nZUZuID0gY2hhbmdlRm47XG4gIH1cblxuICBvblVwZGF0ZSA9IChwcm9wZXJ0eU5hbWU6IHN0cmluZywgYWN0aW9uRGF0YTogYW55KSA9PiB7XG4gICAgY29uc3QgYWN0aW9uRXZlbnRFbWl0dGVyRGF0YSA9IHtcbiAgICAgIHByb3BlcnR5TmFtZTogcHJvcGVydHlOYW1lLFxuICAgICAgaWQ6IHRoaXMuZGF0YS5nZXQodGhpcy5pZFByb3BlcnR5TmFtZSksXG4gICAgICBkYXRhOiBhY3Rpb25EYXRhLFxuICAgIH07XG4gICAgdGhpcy5vblVwZGF0ZUVtaXR0ZXIuZW1pdChhY3Rpb25FdmVudEVtaXR0ZXJEYXRhKTtcbiAgfVxuXG4gIG9uR2V0TG9va3VwcyA9IChsb29rdXBOYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAocGF5bG9hZDogYW55KSA9PiB2b2lkKSA9PiB7XG4gICAgY29uc3QgYWN0aW9uRXZlbnRFbWl0dGVyRGF0YSA9IHtcbiAgICAgIGxvb2t1cE5hbWU6IGxvb2t1cE5hbWUsXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICB9O1xuICAgIHRoaXMub25HZXRMb29rdXBzRW1pdHRlci5lbWl0KGFjdGlvbkV2ZW50RW1pdHRlckRhdGEpO1xuICB9XG5cbiAgb25TaG93TW9kYWwgPSAobW9kYWxOYW1lLCBkYXRhKSA9PiB7XG4gICAgY29uc3QgYWN0aW9uRXZlbnRFbWl0dGVyRGF0YSA9IHtcbiAgICAgIG1vZGFsTmFtZTogbW9kYWxOYW1lLFxuICAgICAgaWQ6IHRoaXMuZGF0YS5nZXQodGhpcy5pZFByb3BlcnR5TmFtZSksXG4gICAgICBkYXRhOiBkYXRhLFxuICAgIH07XG4gICAgdGhpcy5vblNob3dNb2RhbEVtaXR0ZXIuZW1pdChhY3Rpb25FdmVudEVtaXR0ZXJEYXRhKTtcbiAgfVxuXG4gIG9uRGVsZXRlID0gKGFjdGlvbkRhdGE/OiBhbnkpID0+IHtcbiAgICBjb25zdCBhY3Rpb25FdmVudEVtaXR0ZXJEYXRhID0ge1xuICAgICAgaWQ6IHRoaXMuZGF0YS5nZXQodGhpcy5pZFByb3BlcnR5TmFtZSksXG4gICAgICBkYXRhOiBhY3Rpb25EYXRhLFxuICAgIH07XG4gICAgdGhpcy5vbkRlbGV0ZUVtaXR0ZXIuZW1pdChhY3Rpb25FdmVudEVtaXR0ZXJEYXRhKTtcbiAgfVxuXG4gIC8vIHJlZ2lzdGVyRm9ybUNvbnRyb2wocHJvcGVydHlOYW1lOiBzdHJpbmcpXG4gIHJlZ2lzdGVyRm9ybUdyb3VwID0gKGZvcm1Hcm91cDogRm9ybUdyb3VwKTogdm9pZCA9PiB7XG4gICAgdGhpcy5fZm9ybUdyb3VwID0gZm9ybUdyb3VwO1xuICB9XG5cbiAgY3JlYXRlRm9ybUNvbnRyb2wocHJvcGVydHlOYW1lOiBzdHJpbmcsIGluaXRpYWxWYWx1ZTogYW55LCB2YWxpZGF0b3JzOiBWYWxpZGF0b3JzKTogRm9ybUNvbnRyb2wge1xuICAgIGNvbnN0IGZvcm1Db250cm9sID0gbmV3IEZvcm1Db250cm9sKGluaXRpYWxWYWx1ZSwgdmFsaWRhdG9ycyk7XG4gICAgdGhpcy5fZm9ybUdyb3VwLmFkZENvbnRyb2wocHJvcGVydHlOYW1lLCBmb3JtQ29udHJvbCk7XG4gICAgdGhpcy5fZm9ybUdyb3VwS2V5cy5wdXNoKHByb3BlcnR5TmFtZSk7XG4gICAgcmV0dXJuIGZvcm1Db250cm9sO1xuICB9XG5cbn1cbiJdfQ==