import { OnInit, EventEmitter, OnChanges, SimpleChanges, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { Subscription, Subject } from 'rxjs';
import { SubscriptionConfiguration, Script, PlaybackList, RowItem, Filter, Sort, PlaybackListRequest, CustomPlaybackConfiguration } from './models';
import { ScriptService } from './services/script.service';
import { PlaybackService } from './services/playback.service';
import { PlaybackListService } from './services/playback-list.service';
import * as Immutable from 'immutable';
import * as ɵngcc0 from '@angular/core';
export declare class NgEventstoreListingComponent implements OnInit, OnChanges, OnDestroy {
    $: any;
    private changeDetectorRef;
    private scriptService;
    private playbackService;
    private playbackListService;
    updateEmitter: EventEmitter<any>;
    getLookupsEmitter: EventEmitter<any>;
    showModalEmitter: EventEmitter<any>;
    deleteEmitter: EventEmitter<any>;
    playbackListLoadedEmitter: EventEmitter<any>;
    newItemNotifyEmitter: EventEmitter<any>;
    removedItemNotifyEmitter: EventEmitter<any>;
    getPlaybackLIstErrorEmitter: EventEmitter<any>;
    itemComponentClass: any;
    lookups: {};
    socketUrl: string;
    playbackListBaseUrl: string;
    scriptStore: Script[];
    itemSubscriptionConfigurations: SubscriptionConfiguration[];
    listSubscriptionConfiguration: SubscriptionConfiguration;
    playbackListName: string;
    filters: Filter[];
    sort: Sort[];
    pageIndex: number;
    itemsPerPage: number;
    responseBasePath: string;
    emptyListDisplayText: string;
    csvFileName: string;
    customPlaybackConfigurations: CustomPlaybackConfiguration[];
    enableLoadingOverlay: boolean;
    loadingTopBoundSelector: string;
    minHeightCss: string;
    loadingOffset: string;
    debugging: boolean;
    _dataList: Immutable.List<RowItem>;
    _dataCount: number;
    _dataTotalCount: number;
    _previousKey: string;
    _nextKey: string;
    _previousPageIndex: number;
    _initialized: boolean;
    _isLoading: boolean;
    _getPlaybackListSubscription: Subscription;
    _getPlaybackListSubject: Subject<PlaybackListRequest>;
    _exportPlaybackListSubscription: Subscription;
    _exportPlaybackListSubject: Subject<any>;
    _playbackSubscriptionTokens: string[];
    _playbackList: PlaybackList;
    _id: string;
    _stateFunctions: {
        getState: (id: string) => any;
        setState: (id: string, data: any) => void;
    };
    constructor($: any, changeDetectorRef: ChangeDetectorRef, scriptService: ScriptService, playbackService: PlaybackService, playbackListService: PlaybackListService);
    ngOnInit(): Promise<void>;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    trackByFn(index: number, item: any): any;
    private _initializeRequests;
    _getPlaybackList(playbackListName: string, startIndex: number, limit: number, filters?: Filter[], sort?: Sort[], previousKey?: string, nextKey?: string): void;
    requestPlaybackList(): void;
    private _loadScripts;
    private _initSubscriptions;
    private _initCustomPlaybackConfigurations;
    _resetSubscriptions(): void;
    _onUpdate(payload: any): void;
    _onGetLookups(payload: any): void;
    _onShowModal(payload: any): void;
    _onDelete(payload: any): void;
    exportCSV(overrideParams?: PlaybackListRequest, fileNameOverride?: string): void;
    hideLoadingOverlay(): void;
    showLoadingOverlay(): void;
    _fixLoadingOverlayPosition(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgEventstoreListingComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgEventstoreListingComponent, "lib-ng-eventstore-listing", never, { "lookups": "lookups"; "itemSubscriptionConfigurations": "itemSubscriptionConfigurations"; "filters": "filters"; "sort": "sort"; "pageIndex": "pageIndex"; "responseBasePath": "responseBasePath"; "emptyListDisplayText": "emptyListDisplayText"; "csvFileName": "csvFileName"; "enableLoadingOverlay": "enableLoadingOverlay"; "minHeightCss": "minHeightCss"; "loadingOffset": "loadingOffset"; "debugging": "debugging"; "itemComponentClass": "itemComponentClass"; "socketUrl": "socketUrl"; "playbackListBaseUrl": "playbackListBaseUrl"; "scriptStore": "scriptStore"; "listSubscriptionConfiguration": "listSubscriptionConfiguration"; "playbackListName": "playbackListName"; "itemsPerPage": "itemsPerPage"; "customPlaybackConfigurations": "customPlaybackConfigurations"; "loadingTopBoundSelector": "loadingTopBoundSelector"; }, { "updateEmitter": "updateEmitter"; "getLookupsEmitter": "getLookupsEmitter"; "showModalEmitter": "showModalEmitter"; "deleteEmitter": "deleteEmitter"; "playbackListLoadedEmitter": "playbackListLoadedEmitter"; "newItemNotifyEmitter": "newItemNotifyEmitter"; "removedItemNotifyEmitter": "removedItemNotifyEmitter"; "getPlaybackLIstErrorEmitter": "getPlaybackLIstErrorEmitter"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZXZlbnRzdG9yZS1saXN0aW5nLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZy1ldmVudHN0b3JlLWxpc3RpbmcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbkNvbmZpZ3VyYXRpb24sIFNjcmlwdCwgUGxheWJhY2tMaXN0LCBSb3dJdGVtLCBGaWx0ZXIsIFNvcnQsIFBsYXliYWNrTGlzdFJlcXVlc3QsIEN1c3RvbVBsYXliYWNrQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IFNjcmlwdFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3NjcmlwdC5zZXJ2aWNlJztcbmltcG9ydCB7IFBsYXliYWNrU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcGxheWJhY2suc2VydmljZSc7XG5pbXBvcnQgeyBQbGF5YmFja0xpc3RTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9wbGF5YmFjay1saXN0LnNlcnZpY2UnO1xuaW1wb3J0ICogYXMgSW1tdXRhYmxlIGZyb20gJ2ltbXV0YWJsZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ0V2ZW50c3RvcmVMaXN0aW5nQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgJDogYW55O1xuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJpdmF0ZSBzY3JpcHRTZXJ2aWNlO1xuICAgIHByaXZhdGUgcGxheWJhY2tTZXJ2aWNlO1xuICAgIHByaXZhdGUgcGxheWJhY2tMaXN0U2VydmljZTtcbiAgICB1cGRhdGVFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBnZXRMb29rdXBzRW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgc2hvd01vZGFsRW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGVsZXRlRW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcGxheWJhY2tMaXN0TG9hZGVkRW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmV3SXRlbU5vdGlmeUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHJlbW92ZWRJdGVtTm90aWZ5RW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZ2V0UGxheWJhY2tMSXN0RXJyb3JFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBpdGVtQ29tcG9uZW50Q2xhc3M6IGFueTtcbiAgICBsb29rdXBzOiB7fTtcbiAgICBzb2NrZXRVcmw6IHN0cmluZztcbiAgICBwbGF5YmFja0xpc3RCYXNlVXJsOiBzdHJpbmc7XG4gICAgc2NyaXB0U3RvcmU6IFNjcmlwdFtdO1xuICAgIGl0ZW1TdWJzY3JpcHRpb25Db25maWd1cmF0aW9uczogU3Vic2NyaXB0aW9uQ29uZmlndXJhdGlvbltdO1xuICAgIGxpc3RTdWJzY3JpcHRpb25Db25maWd1cmF0aW9uOiBTdWJzY3JpcHRpb25Db25maWd1cmF0aW9uO1xuICAgIHBsYXliYWNrTGlzdE5hbWU6IHN0cmluZztcbiAgICBmaWx0ZXJzOiBGaWx0ZXJbXTtcbiAgICBzb3J0OiBTb3J0W107XG4gICAgcGFnZUluZGV4OiBudW1iZXI7XG4gICAgaXRlbXNQZXJQYWdlOiBudW1iZXI7XG4gICAgcmVzcG9uc2VCYXNlUGF0aDogc3RyaW5nO1xuICAgIGVtcHR5TGlzdERpc3BsYXlUZXh0OiBzdHJpbmc7XG4gICAgY3N2RmlsZU5hbWU6IHN0cmluZztcbiAgICBjdXN0b21QbGF5YmFja0NvbmZpZ3VyYXRpb25zOiBDdXN0b21QbGF5YmFja0NvbmZpZ3VyYXRpb25bXTtcbiAgICBlbmFibGVMb2FkaW5nT3ZlcmxheTogYm9vbGVhbjtcbiAgICBsb2FkaW5nVG9wQm91bmRTZWxlY3Rvcjogc3RyaW5nO1xuICAgIG1pbkhlaWdodENzczogc3RyaW5nO1xuICAgIGxvYWRpbmdPZmZzZXQ6IHN0cmluZztcbiAgICBkZWJ1Z2dpbmc6IGJvb2xlYW47XG4gICAgX2RhdGFMaXN0OiBJbW11dGFibGUuTGlzdDxSb3dJdGVtPjtcbiAgICBfZGF0YUNvdW50OiBudW1iZXI7XG4gICAgX2RhdGFUb3RhbENvdW50OiBudW1iZXI7XG4gICAgX3ByZXZpb3VzS2V5OiBzdHJpbmc7XG4gICAgX25leHRLZXk6IHN0cmluZztcbiAgICBfcHJldmlvdXNQYWdlSW5kZXg6IG51bWJlcjtcbiAgICBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgX2lzTG9hZGluZzogYm9vbGVhbjtcbiAgICBfZ2V0UGxheWJhY2tMaXN0U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgX2dldFBsYXliYWNrTGlzdFN1YmplY3Q6IFN1YmplY3Q8UGxheWJhY2tMaXN0UmVxdWVzdD47XG4gICAgX2V4cG9ydFBsYXliYWNrTGlzdFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIF9leHBvcnRQbGF5YmFja0xpc3RTdWJqZWN0OiBTdWJqZWN0PGFueT47XG4gICAgX3BsYXliYWNrU3Vic2NyaXB0aW9uVG9rZW5zOiBzdHJpbmdbXTtcbiAgICBfcGxheWJhY2tMaXN0OiBQbGF5YmFja0xpc3Q7XG4gICAgX2lkOiBzdHJpbmc7XG4gICAgX3N0YXRlRnVuY3Rpb25zOiB7XG4gICAgICAgIGdldFN0YXRlOiAoaWQ6IHN0cmluZykgPT4gYW55O1xuICAgICAgICBzZXRTdGF0ZTogKGlkOiBzdHJpbmcsIGRhdGE6IGFueSkgPT4gdm9pZDtcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKCQ6IGFueSwgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBzY3JpcHRTZXJ2aWNlOiBTY3JpcHRTZXJ2aWNlLCBwbGF5YmFja1NlcnZpY2U6IFBsYXliYWNrU2VydmljZSwgcGxheWJhY2tMaXN0U2VydmljZTogUGxheWJhY2tMaXN0U2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogUHJvbWlzZTx2b2lkPjtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHRyYWNrQnlGbihpbmRleDogbnVtYmVyLCBpdGVtOiBhbnkpOiBhbnk7XG4gICAgcHJpdmF0ZSBfaW5pdGlhbGl6ZVJlcXVlc3RzO1xuICAgIF9nZXRQbGF5YmFja0xpc3QocGxheWJhY2tMaXN0TmFtZTogc3RyaW5nLCBzdGFydEluZGV4OiBudW1iZXIsIGxpbWl0OiBudW1iZXIsIGZpbHRlcnM/OiBGaWx0ZXJbXSwgc29ydD86IFNvcnRbXSwgcHJldmlvdXNLZXk/OiBzdHJpbmcsIG5leHRLZXk/OiBzdHJpbmcpOiB2b2lkO1xuICAgIHJlcXVlc3RQbGF5YmFja0xpc3QoKTogdm9pZDtcbiAgICBwcml2YXRlIF9sb2FkU2NyaXB0cztcbiAgICBwcml2YXRlIF9pbml0U3Vic2NyaXB0aW9ucztcbiAgICBwcml2YXRlIF9pbml0Q3VzdG9tUGxheWJhY2tDb25maWd1cmF0aW9ucztcbiAgICBfcmVzZXRTdWJzY3JpcHRpb25zKCk6IHZvaWQ7XG4gICAgX29uVXBkYXRlKHBheWxvYWQ6IGFueSk6IHZvaWQ7XG4gICAgX29uR2V0TG9va3VwcyhwYXlsb2FkOiBhbnkpOiB2b2lkO1xuICAgIF9vblNob3dNb2RhbChwYXlsb2FkOiBhbnkpOiB2b2lkO1xuICAgIF9vbkRlbGV0ZShwYXlsb2FkOiBhbnkpOiB2b2lkO1xuICAgIGV4cG9ydENTVihvdmVycmlkZVBhcmFtcz86IFBsYXliYWNrTGlzdFJlcXVlc3QsIGZpbGVOYW1lT3ZlcnJpZGU/OiBzdHJpbmcpOiB2b2lkO1xuICAgIGhpZGVMb2FkaW5nT3ZlcmxheSgpOiB2b2lkO1xuICAgIHNob3dMb2FkaW5nT3ZlcmxheSgpOiB2b2lkO1xuICAgIF9maXhMb2FkaW5nT3ZlcmxheVBvc2l0aW9uKCk6IHZvaWQ7XG59XG4iXX0=